// test/providers/taxonomy_provider_test.dart

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
// NOTE: You must have these imports for the MockSpeciesRepository class
import 'package:mockito/mockito.dart'; 
import 'package:mockito/annotations.dart';

import 'package:butterflies_of_ziro/data/models/species_model.dart';
import 'package:butterflies_of_ziro/providers/taxonomy_provider.dart';
import 'package:butterflies_of_ziro/data/models/taxonomy_node.dart';
import 'package:butterflies_of_ziro/providers/explore_provider.dart';
import 'package:butterflies_of_ziro/data/repositories/species_repository.dart'; // Needed for the class definition
import "./taxonomy_provider_test.mocks.dart";


// --- Define Mock Repository if not already defined globally ---
@GenerateMocks([SpeciesRepository])
void main() {
  // If the mock is not in this file, ensure you have the correct import for it.
  // We'll define a quick MockSpeciesRepository here for compilation safety.
  // Note: The actual Mock implementation is generated by build_runner.
  // class MockSpeciesRepository extends Mock implements SpeciesRepository {} 

  final mockSpeciesData = [
    SpeciesModel(
      id: 1, commonName: 'A', scientificName: 'A. a', family: 'Papilionidae', 
      subfamily: 'Papilioninae', tribe: 'Papilionini', genus: 'Papilio', size: '1', altitude: '1', season: 'Jan', habitat: 'Forest',
    ),
    SpeciesModel(
      id: 2, commonName: 'B', scientificName: 'B. b', family: 'Papilionidae', 
      subfamily: 'Papilioninae', tribe: 'Papilionini', genus: 'Papilio', size: '1', altitude: '1', season: 'Jan', habitat: 'Forest',
    ),
    // Missing an explicit MockSpeciesRepository import here.
    // Assuming it's in a generated file, you must import that file.
  ];

  test('buildTaxonomyTree correctly creates nested hierarchy', () {
    final rootNode = buildTaxonomyTree(mockSpeciesData);

    // Assert Root Structure
    expect(rootNode.name, 'Papilionoidea', reason: 'Root name should be Superfamily name.');
    expect(rootNode.level, 'Superfamily', reason: 'Root level must be Superfamily.');
    
    // Assert Family Level
    expect(rootNode.children.length, 1, reason: 'Should have 1 unique family (Papilionidae).'); 
    final papilionidae = rootNode.children.firstWhere((n) => n.name == 'Papilionidae');
    expect(papilionidae.level, 'Family');
  });


  test('TaxonomyProvider dependency is linked correctly', () {
    // Instantiate a mock repository object (assuming MockSpeciesRepository is defined/imported)
    final mockRepository = MockSpeciesRepository(); 
    
    // Use the mock in the override
    final container = ProviderContainer(
      overrides: [
        exploreProvider.overrideWith((ref) => ExploreNotifier(mockRepository)..state = ExploreState(speciesList: mockSpeciesData)),
      ],
    );
    
    // This checks if the provider successfully builds the tree without crashing
    final tree = container.read(taxonomyProvider);
    expect(tree.name, 'Papilionoidea');
  });
}