// Mocks generated by Mockito 5.4.6 from annotations
// in butterflies_of_ziro/test/data/repositories/explore_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:butterflies_of_ziro/data/models/species_model.dart' as _i5;
import 'package:butterflies_of_ziro/data/repositories/species_repository.dart'
    as _i3;
import 'package:butterflies_of_ziro/providers/filter_state.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SpeciesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpeciesRepository extends _i1.Mock implements _i3.SpeciesRepository {
  MockSpeciesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> initDatabase() =>
      (super.noSuchMethod(
            Invocation.method(#initDatabase, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.SpeciesModel>> getAllSpecies() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSpecies, []),
            returnValue: _i4.Future<List<_i5.SpeciesModel>>.value(
              <_i5.SpeciesModel>[],
            ),
          )
          as _i4.Future<List<_i5.SpeciesModel>>);

  @override
  _i4.Future<List<_i5.SpeciesModel>> getFilteredSpecies(
    _i6.FilterState? filters,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getFilteredSpecies, [filters]),
            returnValue: _i4.Future<List<_i5.SpeciesModel>>.value(
              <_i5.SpeciesModel>[],
            ),
          )
          as _i4.Future<List<_i5.SpeciesModel>>);

  @override
  _i4.Future<_i5.SpeciesModel?> getSpeciesByScientificName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getSpeciesByScientificName, [name]),
            returnValue: _i4.Future<_i5.SpeciesModel?>.value(),
          )
          as _i4.Future<_i5.SpeciesModel?>);
}
