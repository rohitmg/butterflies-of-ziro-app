// test/data/repositories/explore_provider_test.dart

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:butterflies_of_ziro/data/models/species_model.dart';
import 'package:butterflies_of_ziro/data/repositories/species_repository.dart';
import 'package:butterflies_of_ziro/providers/explore_provider.dart';

import 'explore_provider_test.mocks.dart'; // This will be generated by build_runner

// Generate a MockSpeciesRepository
@GenerateMocks([SpeciesRepository])
void main() {
  group('ExploreProvider', () {
    test('should fetch and expose a list of species', () async {
      // Arrange
      final mockRepository = MockSpeciesRepository();
      final mockSpecies = [
        SpeciesModel(
          id: 1,
          commonName: 'Common Jezebel',
          scientificName: 'Delias eucharis',
          family: 'Pieridae',
        ),
      ];

      // Stub the repository method to return the mock data
      when(mockRepository.getAllSpecies()).thenAnswer((_) async => mockSpecies);

      final container = ProviderContainer(
        overrides: [
          speciesRepositoryProvider.overrideWithValue(mockRepository),
        ],
      );

      // Act
      final provider = container.read(exploreProvider.notifier);
      await provider.loadSpecies();

      // Assert
      final state = container.read(exploreProvider);
      expect(state.isLoading, isFalse);
      expect(state.speciesList, equals(mockSpecies));
    });
  });
}